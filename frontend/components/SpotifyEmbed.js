import React, { useState, useEffect } from 'react';
import { View, Dimensions } from 'react-native';

// Run npx expo install react-native-webview
import { WebView } from 'react-native-webview';

/**
 * For opening links in system browser instead of inside the webview
 * Run npx expo install expo-linking
 */
import * as Linking from 'expo-linking';

/**
 * Reference for the HTML code:
 * https://developer.spotify.com/documentation/embeds/tutorials/using-the-iframe-api
 */

export default function SpotifyEmbed({ title, artist }) {
  const [injectedJavaScript, setInjectedJavaScript] = useState('');

  /**
   * Ask Shiyu for access tokens
   * Currently they not generated by the standard practice of making API calls
   * Instead they are obtained from the following website:
   * https://developer.spotify.com/documentation/web-playback-sdk/tutorials/getting-started
   * Expires every hour
   */
  const accessToken = "";
  
  // Retrieves the width of the device's screen in the X-axis direction.
  const deviceWidth = Dimensions.get('window').width;

  useEffect(() => {
    const searchQuery = `https://api.spotify.com/v1/search?q=${encodeURIComponent(`${title} artist:${artist}`)}&type=track&limit=1`;

    try {
      fetch(searchQuery, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      })
        .then((response) => response.json())
        .then((data) => {
          const fetchedUri = data.tracks.items[0]?.uri;
          if (fetchedUri) {
            const newInjectedJavaScript = `
                document.getElementById('embed-iframe').innerHTML = '<iframe src="https://open.spotify.com/embed/track/${fetchedUri}?utm_source=generator"></iframe>';
                window.onSpotifyIframeApiReady = (IFrameAPI) => {
                const element = document.getElementById('embed-iframe');
                const options = {
                    width: '90%',
                    height: '150',
                    uri: '${fetchedUri}'
                };
                const callback = (EmbedController) => {};
                IFrameAPI.createController(element, options, callback);
                };
            `;
            setInjectedJavaScript(newInjectedJavaScript);
          } else {
            console.error('No URI found in the fetched data.');
          }
        });
    } catch (error) {
      console.error('Error fetching song from Spotify:', error.message);
    }
  }, []);

  // Can replace <body> with <body style="background-color:black;"> to make webview background blend with app background
  const htmlContent = `
    <html lang="en">
        <head>
            <title></title>
            <meta name="viewport" content="width=device-width, initial-scale=1" />
        </head>
        <body>
            <div id="embed-iframe"></div>
            <script src="https://open.spotify.com/embed/iframe-api/v1" async></script>
            <script type="text/javascript">
                ${injectedJavaScript}
            </script>
        </body>
    </html>
    `;

  /**
   * Determines whether the WebView should start loading a request based on the URL.
   * If the URL includes "spotify.app.link", it opens the URL using Linking and returns false.
   * Otherwise, it returns true to allow the WebView to continue loading the request.
   */
  function shouldStartLoadWithRequest(event) {
      if (event.url.includes("spotify.app.link")) {
          Linking.openURL(event.url);
          return false;
      }
      return true;
  };

  return (
    <View style={{ width: '100%', height: '100%' }}>
        <WebView
            originWhitelist={['*']}
            mixedContentMode="compatibility"
            injectedJavaScript={injectedJavaScript}
            source={{
                html: htmlContent,
            }}
            startInLoadingState={true}
            scalesPageToFit={true}
            style={{
                width: deviceWidth,
                height: "100%",
            }}
            onShouldStartLoadWithRequest={shouldStartLoadWithRequest}
        />
    </View>
  );
};
